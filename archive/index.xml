<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archives on Kurtis Rainbolt-Greene&#39;s Web Log</title>
    <link>https://www.kurtis.rainbolt-greene.online/archive/</link>
    <description>Recent content in Archives on Kurtis Rainbolt-Greene&#39;s Web Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://www.kurtis.rainbolt-greene.online/archive/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An ORM born from my frustration with the status quo</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/an-orm-born-from-my-frustration-with-the-status-quo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/an-orm-born-from-my-frustration-with-the-status-quo/</guid>
      <description>The idea behind this ORM is it mimics Ember.js&amp;rsquo;s object existence model. That is, when Ember.js expects an object to exist and it doesn&amp;rsquo;t it will provide a skeleton version with the basic needed functionality.
The idea is that you start off with a class that receives the model behavior set. When and if it needs a: serializer, normalizer, sanitizer, validator, or deserializer it can come up with one on the fly if the environment hasn&amp;rsquo;t defined one.</description>
    </item>
    
    <item>
      <title>An ORM born from my frustration with the status quo</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/developers-are-harmed-by-symbols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/developers-are-harmed-by-symbols/</guid>
      <description>Note: If you&amp;rsquo;re reading this and have English as a second language I want to apologize up front if I come off as saying something that sounds like &amp;ldquo;English is the best for programming&amp;rdquo;. There is nothing to my knowledge that makes English good for programming, but instead I make this commentary because I only know English. If I only knew Spanish or French I would probably have that in place of English.</description>
    </item>
    
    <item>
      <title>Exploring Padrino</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/exploring-padrino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/exploring-padrino/</guid>
      <description>I&amp;rsquo;ve finally decided to test the &amp;ldquo;Padrino&amp;rdquo; waters again. I&amp;rsquo;ve heard a lot of good things about it lately, and a recent benchmark blew my fucking mind. So here I am, looking at the website, in my terminal, and with an editor open. A word about Padrino first: It&amp;rsquo;s not an MVC framework, despite what the website says and how familiar that architecture feels. It&amp;rsquo;s actually a PAC, and it would do you well to remember this when using Padrino.</description>
    </item>
    
    <item>
      <title>How I learned a little about databases</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/how-i-learned-a-little-about-databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/how-i-learned-a-little-about-databases/</guid>
      <description>I&amp;rsquo;ve been programming about three years now with most of my work done in web development. A serious part of web development work is with databases. You store user information, statistics, scraped data, and anything else that&amp;rsquo;s important enough to be persisted in a database. It&amp;rsquo;s an important and yet often marginalized side of modern web development.
My first real language was Ruby and so far it remains the steadfast tool that I use when I need to build a solution to a problem.</description>
    </item>
    
    <item>
      <title>I am learning Rails</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/i-am-learning-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/i-am-learning-rails/</guid>
      <description>In the last two weeks I had decided to learn Rails. I&amp;rsquo;ve always had the resources to learn, but I&amp;rsquo;ve always found something else distracting to do. In meeting with other local developers at the Eugene, Oregon Web Developer Meetup (very creative name) I talked with at least three Rails developers with jobs developing in Rails locally. This inspired me to learn.
Yet again I found myself distracted by something shiny and less boring: Padrino, a Rails substitute built on my favorite microframework Sinatra.</description>
    </item>
    
    <item>
      <title>I don&#39;t like file systems</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/i-dont-like-file-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/i-dont-like-file-systems/</guid>
      <description>I&amp;rsquo;ve always been someone who is critical of how computer filesystems are shaping up these days. I think my biggest contention is that these developers can&amp;rsquo;t come up with a memorable name at all. Most people who care about this topic will shrug that off as a small thing (If they don&amp;rsquo;t suggest it&amp;rsquo;s a feature).
Which is fine by me because I have a ton of ammo left to throw at these things.</description>
    </item>
    
    <item>
      <title>I give up I need to learn functional programming</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/i-give-up-i-need-to-learn-fp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/i-give-up-i-need-to-learn-fp/</guid>
      <description>Alright. Fine. I finally give in. I need to learn a functional programming language. I&amp;rsquo;ve tried before and given up. First I tried Erlang and it was too complex and strange. Then I tried Haskell and it went from simple to crazy. Then I picked up Clojure and I was like &amp;ldquo;Woah. Verbose!&amp;rdquo;
Learning Ruby has really punched a hole in my mind. Ruby was my first language and has really spoiled me.</description>
    </item>
    
    <item>
      <title>Looking Glass</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/looking-glass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/looking-glass/</guid>
      <description>One of the newer projects I&amp;rsquo;ve been working on lately is what I call Looking Glass. The Looking Glass project is a script written in the Ruby programming language. The script takes content and keys and produces HTML output. The keys are defined blocks that contain regular expressions and style properties paired with values. Many people will instantly recognize the similarity between a Glass list and Cascading Style Sheets. Here&amp;rsquo;s an example of two key blocks.</description>
    </item>
    
    <item>
      <title>Loving Io is Painful</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/loving-io-is-painful/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/loving-io-is-painful/</guid>
      <description>Recently (as in within the last two months) I&amp;rsquo;ve switched almost completely from doing things in Ruby to doing things in Io. Well, at least for hobby projects. Io simply isn&amp;rsquo;t at the point where it can be used for the kinds of things I do. There&amp;rsquo;s no equivalent Rails or even Sinatra. While I&amp;rsquo;m working on one there still isn&amp;rsquo;t a lib manager that doesn&amp;rsquo;t have &amp;ldquo;testing&amp;rdquo; or &amp;ldquo;documentation&amp;rdquo; in the todo list.</description>
    </item>
    
    <item>
      <title>My (early) thoughts on CSS</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/my-thoughts-on-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/my-thoughts-on-css/</guid>
      <description>I know so very little about the world, the universe, and the people around me. With that said I can be confidant in saying that I know that Cascading Style Sheet syntax is terrible.
If you&amp;rsquo;re reading this blog and don&amp;rsquo;t know what Cascading Style Sheets (CSS) are then I here&amp;rsquo;s a little introduction:
 Developed by: World Wide Web Consortium
 Initially Released: 17 December 1996, or 13 years ago.</description>
    </item>
    
    <item>
      <title>My imaginary rack replacement</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/my-imaginary-rack-replacement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/my-imaginary-rack-replacement/</guid>
      <description>One day I was really frustrated the ruby package rack, so I imagined what a better rack would look like.
require &amp;quot;webstack&amp;quot; require &amp;quot;webstack-throttle&amp;quot; require &amp;quot;webstack-protection&amp;quot; require &amp;quot;webstack-tempfile_manager&amp;quot; require &amp;quot;webstack-deserializer&amp;quot; require &amp;quot;webstack-dispatcher&amp;quot; require &amp;quot;webstack-content_length_setter&amp;quot; require &amp;quot;webstack-content_type_setter&amp;quot; require &amp;quot;webstack-accept_setter&amp;quot; require &amp;quot;webstack-serializer&amp;quot; # Each cycle calls this server block. # The request and response objects are semi-mutable, see: webstack2.rb. Webstack::Server.new do |stack, request, response| Throttle::Middleware.(request) Protection::Middleware.(request) TempfileManager::Middleware.(request) Deserializer::Middleware.(request) Dispatcher.(stack) ContentLengthSetter::Middleware.(response) ContentTypeSetter::Middleware.(response) AcceptSetter::Middleware.(response) Serializer::Middleware.</description>
    </item>
    
    <item>
      <title>Mythoas API Framework (Ruby Edition)</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/mythoas-api-framework-ruby-edition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/mythoas-api-framework-ruby-edition/</guid>
      <description>If you&amp;rsquo;re visiting my blog you might already be familiar with my opinion on web API standards and practices. If not I&amp;rsquo;ll give you the quick bullet points:
 I love [HTTP][HTTP] If I have a choice the server is going to be behaving according to the [REST][REST] constraints Furthermore I wildly prefer using the constraints defined for [HATEOS]() The format of the messages will probably be in JSON The object bodies will follow the [application/vnd.</description>
    </item>
    
    <item>
      <title>OpenStruct sucked, I fixed it</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/openstruct-sucked-and-i-fixed-it/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/openstruct-sucked-and-i-fixed-it/</guid>
      <description>For reference I wrote this article about a year ago according to the commits at the astruct repo. I never submitted it because I got frustrated with the Ruby MRI source contribution process. astruct could definitely use some cleaning up, but actually runs much better in 2.1.0 so the details still stand.
 Hello Ruby Core,
In this Pull Request I have made a series of changes that I would like to be added to the Ruby stdlib library ostruct.</description>
    </item>
    
    <item>
      <title>Postgres Client interface</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/postgres-client-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/postgres-client-interface/</guid>
      <description>require &amp;quot;postgresql&amp;quot; client = PostgreSQL::Client.new(url: ENV[&amp;quot;POSTGRESQL_URL&amp;quot;]) table = PostgreSQL::Table.new(client: client, name: &amp;quot;accounts&amp;quot;) query = PostgreSQL::Query::Select.new(fields: [&amp;quot;id&amp;quot;, &amp;quot;name&amp;quot;], table: table, where: { &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;?&amp;quot; }, parameters: [&amp;quot;%urtis%&amp;quot;]) # query.to_s #=&amp;gt; SELECT id, name FROM accounts WHERE name = &amp;quot;%urtis%&amp;quot;; request = PostgreSQL::Request.new(client: client, query: query) # request.to_a #=&amp;gt; [{ id: 4, name: &amp;quot;Kurtis Rainbolt-Greene&amp;quot;}, { ... }] query2 = PostgreSQL::Query::Update.new(fields: { &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;James Rainbolt-Greene&amp;quot;, &amp;quot;age&amp;quot; =&amp;gt; 42 }, table: table, where: { &amp;quot;id&amp;quot; =&amp;gt; 4 }) # query2.</description>
    </item>
    
    <item>
      <title>Rails Controllers and Actions</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/rails-controllers-and-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/rails-controllers-and-actions/</guid>
      <description>Deep down somewhere it&amp;rsquo;s always bothered me how Rails handles the concept of Controllers in it&amp;rsquo;s custom MVC framework. If you don&amp;rsquo;t know I&amp;rsquo;ll attempt to explain: In Rails you have a router. The router decides where requests go based on some meta-method magic. For example lets take this Rails routes.rb file:
Blog::Application.routes.draw do resources :ideas resources :articles end  Rails takes these instructions and understands a few things from it:</description>
    </item>
    
    <item>
      <title>Why i created emailspy</title>
      <link>https://www.kurtis.rainbolt-greene.online/archive/why-i-created-emailspy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.kurtis.rainbolt-greene.online/archive/why-i-created-emailspy/</guid>
      <description>The Setup It&amp;rsquo;s Wednesday night and I&amp;rsquo;m working on a client&amp;rsquo;s project. I&amp;rsquo;m making the app use S3 to store assets instead of being compiled by me and on Heroku. I notice that the production emails are wonky, specifically with the images and styles. I grab letter_opener and run development.
Suddenly, an error! I check out the backtrace and see that it&amp;rsquo;s actually something wrong in letter_opener. I grab the meaningful lines and start googling.</description>
    </item>
    
  </channel>
</rss>